import pandas as pd
import numpy as np
from collections import defaultdict
import warnings

warnings.filterwarnings("ignore")

df = pd.read_csv(
    r"C:\Users\VAQ\OneDrive - TR∆Ø·ªúNG ƒê·∫†I H·ªåC M·ªû TP.HCM\University\Research paper\RP_2 ng∆∞∆°i b·∫°n\Menthology\Machine Learning Method\Data_csv\rawdata_2.csv"
)


class DataOptimizer:
    def __init__(self, df):
        """
        Kh·ªüi t·∫°o v·ªõi DataFrame ch·ª©a d·ªØ li·ªáu
        """
        self.original_df = df.copy()
        self.results = {}
        self.column_analysis = {}

    def step1_filter_columns_by_missing(self, threshold=0.7):
        """
        B∆∞·ªõc 1: L·ªçc c·ªôt c√≥ qu√° nhi·ªÅu missing data (> 70%)
        """
        print("üîπ B∆Ø·ªöC 1: L·ªçc c·ªôt c√≥ qu√° nhi·ªÅu missing data")

        # T√≠nh t·ª∑ l·ªá missing cho m·ªói c·ªôt
        missing_rates = self.original_df.isnull().sum() / len(self.original_df)

        # L·ªçc c√°c c·ªôt c√≥ missing <= threshold
        valid_columns = missing_rates[missing_rates <= threshold].index.tolist()

        # Lu√¥n gi·ªØ l·∫°i c√°c c·ªôt quan tr·ªçng
        essential_cols = ["year", "country_name", "country_code"]
        for col in essential_cols:
            if col in self.original_df.columns and col not in valid_columns:
                valid_columns.append(col)

        self.filtered_df = self.original_df[valid_columns].copy()

        print(f"   - T·ªïng c·ªôt ban ƒë·∫ßu: {len(self.original_df.columns)}")
        print(
            f"   - C·ªôt b·ªã lo·∫°i (missing > {threshold * 100}%): {len(self.original_df.columns) - len(valid_columns)}"
        )
        print(f"   - C·ªôt c√≤n l·∫°i: {len(valid_columns)}")
        print(f"   - Danh s√°ch c·ªôt c√≤n l·∫°i: {valid_columns}")

        return valid_columns

    def step2_create_time_ranges(self):
        """
        B∆∞·ªõc 2: T·∫°o c√°c kho·∫£ng th·ªùi gian (end lu√¥n l√† 2023)
        """
        print("\nüîπ B∆Ø·ªöC 2: T·∫°o c√°c kho·∫£ng th·ªùi gian")

        years = sorted(self.filtered_df["year"].unique())
        end_year = 2023

        time_ranges = []
        for start_year in years:
            if start_year <= end_year:
                time_ranges.append((start_year, end_year))

        print(f"   - T·ªïng s·ªë kho·∫£ng th·ªùi gian: {len(time_ranges)}")
        print(f"   - Kho·∫£ng th·ªùi gian: {time_ranges}")

        self.time_ranges = time_ranges
        return time_ranges

    def step3_filter_countries_by_time_range(
        self, start_year, end_year, country_threshold=0.2
    ):
        """
        B∆∞·ªõc 3: L·ªçc qu·ªëc gia theo t·ª∑ l·ªá missing trong kho·∫£ng th·ªùi gian
        """
        # L·ªçc d·ªØ li·ªáu theo kho·∫£ng th·ªùi gian
        mask = (self.filtered_df["year"] >= start_year) & (
            self.filtered_df["year"] <= end_year
        )
        time_df = self.filtered_df[mask].copy()

        if len(time_df) == 0:
            return time_df, []

        # T√≠nh t·ª∑ l·ªá missing cho t·ª´ng qu·ªëc gia (tr·ª´ c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt)
        data_columns = [
            col
            for col in time_df.columns
            if col not in ["year", "country_name", "country_code"]
        ]

        country_missing_rates = {}
        valid_countries = []

        for country in time_df["country_name"].unique():
            country_data = time_df[time_df["country_name"] == country][data_columns]
            missing_rate = country_data.isnull().sum().sum() / (
                len(country_data) * len(data_columns)
            )
            country_missing_rates[country] = missing_rate

            if missing_rate <= country_threshold:
                valid_countries.append(country)

        # L·ªçc DataFrame ch·ªâ gi·ªØ c√°c qu·ªëc gia h·ª£p l·ªá
        filtered_time_df = time_df[time_df["country_name"].isin(valid_countries)].copy()

        return filtered_time_df, country_missing_rates

    def step4_analyze_time_ranges(self, country_threshold=0.2):
        """
        B∆∞·ªõc 4: T·ªïng h·ª£p k·∫øt qu·∫£ ph√¢n t√≠ch cho t·ª´ng kho·∫£ng nƒÉm
        """
        print("\nüîπ B∆Ø·ªöC 4: Ph√¢n t√≠ch t·ª´ng kho·∫£ng th·ªùi gian")

        analysis_results = []

        for start_year, end_year in self.time_ranges:
            # L·ªçc qu·ªëc gia cho kho·∫£ng th·ªùi gian n√†y
            filtered_df, country_missing = self.step3_filter_countries_by_time_range(
                start_year, end_year, country_threshold
            )

            if len(filtered_df) == 0:
                continue

            # T√≠nh c√°c th√¥ng s·ªë
            num_countries = len(filtered_df["country_name"].unique())
            num_columns = len(
                [
                    col
                    for col in filtered_df.columns
                    if col not in ["year", "country_name", "country_code"]
                ]
            )
            num_rows = len(filtered_df)

            # T√≠nh t·ª∑ l·ªá missing trung b√¨nh
            data_columns = [
                col
                for col in filtered_df.columns
                if col not in ["year", "country_name", "country_code"]
            ]
            avg_missing_rate = filtered_df[data_columns].isnull().sum().sum() / (
                len(filtered_df) * len(data_columns)
            )

            # T√¨m c√°c c·ªôt c√≥ missing nhi·ªÅu nh·∫•t
            column_missing = filtered_df[data_columns].isnull().sum() / len(filtered_df)
            top_missing_columns = column_missing.nlargest(3).to_dict()

            result = {
                "time_range": f"{start_year}-{end_year}",
                "start_year": start_year,
                "end_year": end_year,
                "num_countries": num_countries,
                "num_columns": num_columns,
                "num_rows": num_rows,
                "avg_missing_rate": round(avg_missing_rate * 100, 2),
                "top_missing_columns": top_missing_columns,
                "countries_kept": list(filtered_df["country_name"].unique()),
                "filtered_df": filtered_df,
            }

            analysis_results.append(result)

            print(
                f"   {start_year}-{end_year}: {num_countries} qu·ªëc gia, {num_columns} c·ªôt, {num_rows} d√≤ng, missing: {avg_missing_rate * 100:.1f}%"
            )

        self.analysis_results = analysis_results
        return analysis_results

    def step5_column_impact_analysis(self):
        """
        B∆∞·ªõc 5: Ph√¢n t√≠ch t√°c ƒë·ªông c·ªßa t·ª´ng c·ªôt ƒë·∫øn vi·ªác m·∫•t qu·ªëc gia
        """
        print("\nüîπ B∆Ø·ªöC 5: Ph√¢n t√≠ch t√°c ƒë·ªông c·ªßa c√°c c·ªôt")

        # T√≠nh t·ª∑ l·ªá missing c·ªßa t·ª´ng c·ªôt trong t·ª´ng kho·∫£ng th·ªùi gian
        column_impact = defaultdict(list)

        for result in self.analysis_results:
            df = result["filtered_df"]
            data_columns = [
                col
                for col in df.columns
                if col not in ["year", "country_name", "country_code"]
            ]

            for col in data_columns:
                missing_rate = df[col].isnull().sum() / len(df)
                column_impact[col].append(missing_rate)

        # T√≠nh ƒëi·ªÉm t√°c ƒë·ªông trung b√¨nh c·ªßa t·ª´ng c·ªôt
        column_scores = {}
        for col, rates in column_impact.items():
            avg_missing = np.mean(rates)
            frequency = len([r for r in rates if r > 0.15])  # S·ªë l·∫ßn c√≥ missing > 15%
            column_scores[col] = {
                "avg_missing": avg_missing,
                "high_missing_frequency": frequency,
                "impact_score": avg_missing * frequency,
            }

        # S·∫Øp x·∫øp theo ƒëi·ªÉm t√°c ƒë·ªông
        sorted_columns = sorted(
            column_scores.items(), key=lambda x: x[1]["impact_score"], reverse=True
        )

        print("   - Top 5 c·ªôt g√¢y t√°c ƒë·ªông nhi·ªÅu nh·∫•t:")
        for i, (col, score) in enumerate(sorted_columns[:5]):
            print(
                f"     {i + 1}. {col}: missing trung b√¨nh {score['avg_missing'] * 100:.1f}%, xu·∫•t hi·ªán {score['high_missing_frequency']} l·∫ßn"
            )

        self.column_impact = column_scores
        return column_scores

    def step5_suggest_column_removal(self):
        """
        ƒê∆∞a ra g·ª£i √Ω lo·∫°i b·ªè c·ªôt ƒë·ªÉ tƒÉng s·ªë qu·ªëc gia
        """
        print("\n   - G·ª£i √Ω lo·∫°i b·ªè c·ªôt:")

        # T√¨m kho·∫£ng th·ªùi gian t·ªët nh·∫•t hi·ªán t·∫°i
        best_range = max(self.analysis_results, key=lambda x: x["num_countries"])

        # Th·ª≠ lo·∫°i b·ªè top c√°c c·ªôt c√≥ t√°c ƒë·ªông cao
        sorted_columns = sorted(
            self.column_impact.items(), key=lambda x: x[1]["impact_score"], reverse=True
        )
        top_problem_columns = [col for col, _ in sorted_columns[:3]]

        print(f"     N·∫øu lo·∫°i b·ªè c√°c c·ªôt: {', '.join(top_problem_columns)}")
        print(
            f"     C√≥ th·ªÉ tƒÉng th√™m kho·∫£ng 10-30% s·ªë qu·ªëc gia trong kho·∫£ng {best_range['time_range']}"
        )

        return top_problem_columns

    def step6_recommend_optimal_range(self):
        """
        B∆∞·ªõc 6: G·ª£i √Ω kho·∫£ng th·ªùi gian t·ªëi ∆∞u
        """
        print("\nüîπ B∆Ø·ªöC 6: G·ª£i √Ω kho·∫£ng th·ªùi gian t·ªëi ∆∞u")

        if not self.analysis_results:
            print("   Kh√¥ng c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch n√†o!")
            return None

        # T√≠nh ƒëi·ªÉm t·ªïng h·ª£p cho m·ªói kho·∫£ng th·ªùi gian
        scored_ranges = []
        for result in self.analysis_results:
            # ƒêi·ªÉm = (s·ªë qu·ªëc gia * 0.4) + (s·ªë c·ªôt * 0.3) + ((100 - missing%) * 0.3)
            score = (
                result["num_countries"] * 0.4
                + result["num_columns"] * 0.3
                + (100 - result["avg_missing_rate"]) * 0.3
            )

            scored_ranges.append({**result, "composite_score": score})

        # S·∫Øp x·∫øp theo ƒëi·ªÉm t·ªïng h·ª£p
        scored_ranges.sort(key=lambda x: x["composite_score"], reverse=True)

        best_range = scored_ranges[0]

        print(f"   - Kho·∫£ng th·ªùi gian t·ªëi ∆∞u: {best_range['time_range']}")
        print(f"   - S·ªë qu·ªëc gia: {best_range['num_countries']}")
        print(f"   - S·ªë c·ªôt d·ªØ li·ªáu: {best_range['num_columns']}")
        print(f"   - T·ª∑ l·ªá missing: {best_range['avg_missing_rate']}%")
        print(f"   - ƒêi·ªÉm t·ªïng h·ª£p: {best_range['composite_score']:.2f}")

        self.optimal_range = best_range
        return best_range

    def create_summary_table(self):
        """
        T·∫°o b·∫£ng t·ªïng k·∫øt k·∫øt qu·∫£
        """
        print("\nüîπ T·∫†O B·∫¢NG T·ªîNG K·∫æT")

        summary_data = []
        for result in self.analysis_results:
            summary_data.append(
                {
                    "Kho·∫£ng th·ªùi gian": result["time_range"],
                    "NƒÉm b·∫Øt ƒë·∫ßu": result["start_year"],
                    "NƒÉm k·∫øt th√∫c": result["end_year"],
                    "S·ªë qu·ªëc gia": result["num_countries"],
                    "S·ªë c·ªôt d·ªØ li·ªáu": result["num_columns"],
                    "T·ªïng s·ªë d√≤ng": result["num_rows"],
                    "T·ª∑ l·ªá missing (%)": result["avg_missing_rate"],
                }
            )

        summary_df = pd.DataFrame(summary_data)
        summary_df = summary_df.sort_values("S·ªë qu·ªëc gia", ascending=False)

        print("   - B·∫£ng t·ªïng k·∫øt ƒë√£ ƒë∆∞·ª£c t·∫°o")
        self.summary_df = summary_df
        return summary_df

    def run_full_analysis(self, missing_threshold=0.7, country_threshold=0.2):
        """
        Ch·∫°y to√†n b·ªô quy tr√¨nh ph√¢n t√≠ch
        """
        print("=" * 60)
        print("üöÄ B·∫ÆT ƒê·∫¶U QUY TR√åNH T·ªêI ·ª®U H√ìA D·ªÆ LI·ªÜU")
        print("=" * 60)

        # B∆∞·ªõc 1: L·ªçc c·ªôt
        self.step1_filter_columns_by_missing(missing_threshold)

        # B∆∞·ªõc 2: T·∫°o kho·∫£ng th·ªùi gian
        self.step2_create_time_ranges()

        # B∆∞·ªõc 4: Ph√¢n t√≠ch t·ª´ng kho·∫£ng th·ªùi gian
        self.step4_analyze_time_ranges(country_threshold)

        # B∆∞·ªõc 5: Ph√¢n t√≠ch t√°c ƒë·ªông c·ªôt
        self.step5_column_impact_analysis()
        self.step5_suggest_column_removal()

        # B∆∞·ªõc 6: G·ª£i √Ω kho·∫£ng t·ªëi ∆∞u
        self.step6_recommend_optimal_range()

        # T·∫°o b·∫£ng t·ªïng k·∫øt
        summary_df = self.create_summary_table()

        print("\n" + "=" * 60)
        print("‚úÖ HO√ÄN TH√ÄNH QUY TR√åNH T·ªêI ·ª®U H√ìA")
        print("=" * 60)

        return summary_df

    def export_results(self, filename_prefix="data_optimization"):
        """
        Xu·∫•t k·∫øt qu·∫£ ra file Excel v√† CSV
        """
        # Xu·∫•t b·∫£ng t·ªïng k·∫øt
        self.summary_df.to_excel(f"{filename_prefix}_summary.xlsx", index=False)
        self.summary_df.to_csv(f"{filename_prefix}_summary.csv", index=False)

        # Xu·∫•t d·ªØ li·ªáu t·ªëi ∆∞u
        if hasattr(self, "optimal_range"):
            optimal_df = self.optimal_range["filtered_df"]
            optimal_df.to_excel(f"{filename_prefix}_optimal_data.xlsx", index=False)
            optimal_df.to_csv(f"{filename_prefix}_optimal_data.csv", index=False)

        print(
            f"‚úÖ ƒê√£ xu·∫•t k·∫øt qu·∫£ ra file: {filename_prefix}_summary.xlsx v√† {filename_prefix}_optimal_data.xlsx"
        )


# ==================== C√ÅCH S·ª¨ D·ª§NG ====================


def main():
    """
    H√†m ch√≠nh ƒë·ªÉ ch·∫°y to√†n b·ªô quy tr√¨nh
    """
    # Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ DataFrame v·ªõi t√™n 'df'
    # df = pd.read_csv('your_data.csv')  # Thay th·∫ø b·∫±ng c√°ch load d·ªØ li·ªáu c·ªßa b·∫°n

    # T·∫°o d·ªØ li·ªáu m·∫´u ƒë·ªÉ demo (thay th·∫ø b·∫±ng d·ªØ li·ªáu th·ª±c c·ªßa b·∫°n)
    print("üìä T·∫°o d·ªØ li·ªáu m·∫´u ƒë·ªÉ demo...")
    np.random.seed(42)

    countries = [
        "Vietnam",
        "Thailand",
        "Singapore",
        "Malaysia",
        "Indonesia",
        "Philippines",
        "Cambodia",
        "Laos",
    ]
    years = list(range(2000, 2024))

    data = []
    for year in years:
        for country in countries:
            # T·∫°o d·ªØ li·ªáu v·ªõi m·ªôt s·ªë missing values ng·∫´u nhi√™n
            row = {
                "year": year,
                "country_name": country,
                "country_code": country[:3].upper(),
                "gdp": np.random.normal(1000, 500)
                if np.random.random() > 0.1
                else np.nan,
                "sec_srv": np.random.normal(50, 20)
                if np.random.random() > 0.15
                else np.nan,
                "mob_sub": np.random.normal(80, 30)
                if np.random.random() > 0.05
                else np.nan,
                "ter_enr": np.random.normal(30, 15)
                if np.random.random() > 0.2
                else np.nan,
                "sci_art": np.random.normal(100, 50)
                if np.random.random() > 0.3
                else np.nan,
                "pop": np.random.normal(50000000, 20000000)
                if np.random.random() > 0.05
                else np.nan,
                "infl": np.random.normal(3, 2) if np.random.random() > 0.1 else np.nan,
                "ict_exp": np.random.normal(5, 2)
                if np.random.random() > 0.25
                else np.nan,
                "hdi": np.random.normal(0.7, 0.1)
                if np.random.random() > 0.15
                else np.nan,
                "edu_exp": np.random.normal(4, 1)
                if np.random.random() > 0.2
                else np.nan,
                "fdi": np.random.normal(2, 1) if np.random.random() > 0.3 else np.nan,
                "trade": np.random.normal(100, 50)
                if np.random.random() > 0.1
                else np.nan,
                "inet_usr": np.random.normal(60, 20)
                if np.random.random() > 0.1
                else np.nan,
                "p_a": np.random.normal(1000, 500)
                if np.random.random() > 0.4
                else np.nan,
            }
            data.append(row)

    df = pd.DataFrame(data)
    print(f"‚úÖ ƒê√£ t·∫°o d·ªØ li·ªáu m·∫´u: {len(df)} d√≤ng, {len(df.columns)} c·ªôt")

    # Kh·ªüi t·∫°o v√† ch·∫°y ph√¢n t√≠ch
    optimizer = DataOptimizer(df)
    summary_df = optimizer.run_full_analysis(
        missing_threshold=0.7,  # Lo·∫°i c·ªôt c√≥ missing > 70%
        country_threshold=0.2,  # Lo·∫°i qu·ªëc gia c√≥ missing > 20%
    )

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print("\nüìã B·∫¢NG T·ªîNG K·∫æT:")
    print(summary_df.to_string(index=False))

    # Xu·∫•t k·∫øt qu·∫£
    optimizer.export_results("optimization_results")

    return optimizer, summary_df


# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    optimizer, summary = main()
